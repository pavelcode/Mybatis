<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间,作用就是对sql进行分类化的管理
    注意:使用mapper代理开发时，namespace有特殊作用
 -->
<mapper namespace="test">
<!-- 在映射文件中配置很多sql语句 -->
<!-- 需求：通过Id查询用户表的记录 -->
<!-- 通过SELECT执行数据库查询 
    id: sql语句的唯一标识
    parameterType:指定输入参数的类型,这里指定int型
    #{}:表示一个占位符;
    #{id}:其中Id表示接收输入的参数，参数名称就是id。如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或者其它名称;
    resultType:指定sql输出结果所映射的java对象类型,select指定resultType表示将单条记录映射成java对象。
-->
<select id="findUserById" parameterType="int" resultType="com.cblue.entity.User" >
    select * from user where id=#{id}
</select>
<!-- 根据用户名称模糊查询用户信息,可能返回多条数据
    resultType:指定的就是单条记录所映射的java类型;
    ${}:表示拼接sql字符串，将接收到的参数内容不加任何修饰拼接在sql中.
    使用${}拼接sql，可能会引起sql注入
    ${value}:接收输入参数的内容，如果传入的是简单类型,${}中只能使用value
 -->
<select id="findUserByName" parameterType="java.lang.String" resultType="com.cblue.entity.User" >
    select * from user where username LIKE '%${value}%'
</select>
<!-- 添加用户 
     parameterType:指定输入的参数类型是pojo(包括用户信息);
     #{}中指定pojo的属性名称，接收到pojo对象的属性值,mybatis通过OGNL(类似struts2的OGNL)获取对象的属性值
     最后不能有分号
-->
<insert id="insertUser" parameterType="com.cblue.entity.User" >
    <!-- 
        将insert插入的数据的主键返回到User对象中
     -->
     <!-- 
      selectKey 用于主键返回，定义获取主键的sql
        last_insert_id()是一个函数
        select last_insert_id():通过这个函数可以得到刚insert进去记录的主键值，只适用于自增主键;
        keyProperty:将查询到的主键值返回给User对象的属性名
        order:select last_insert_id()执行顺序，after的含义是在insert语句之后执行
        resultType:指定select last_insert_id()的结果类型
      -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
        select last_insert_id()
    </selectKey>
      insert into user (username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})
    <!-- 
        使用mysql的uuid()，实现非自增主键的返回。
        执行过程:通过uuid()得到主键，将主键设置到user对象的Id的属性中，其次，在insert执行时，从user对象中取出Id属性值;
     <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
        select uuid()
    </selectKey>
        insert into t_user (id,username,birthday) values(#{id},#{name},#{birthday})
     -->
</insert>
<!-- 删除用户 
    根据ID删除用户,需要输入Id值
-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id=#{id}
    </delete>
<!-- 更新用户 
    需要传入用户的Id和用户的更新信息
    parameterType:指定User对象，包括Id和用户的更新信息,注意：Id是必须存在的
    #{id}:从输入的User对象中获取Id的属性值
-->
<update id="updateUser" parameterType="com.cblue.entity.User">
    update user set username=#{username},birthday=#{birthday}  where id=#{id}
</update>

</mapper>

